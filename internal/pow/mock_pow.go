// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package pow is a generated GoMock package.
package pow

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPOW is a mock of POW interface.
type MockPOW struct {
	ctrl     *gomock.Controller
	recorder *MockPOWMockRecorder
}

// MockPOWMockRecorder is the mock recorder for MockPOW.
type MockPOWMockRecorder struct {
	mock *MockPOW
}

// NewMockPOW creates a new mock instance.
func NewMockPOW(ctrl *gomock.Controller) *MockPOW {
	mock := &MockPOW{ctrl: ctrl}
	mock.recorder = &MockPOWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPOW) EXPECT() *MockPOWMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockPOW) GenerateChallenge() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockPOWMockRecorder) GenerateChallenge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockPOW)(nil).GenerateChallenge))
}

// SolveChallenge mocks base method.
func (m *MockPOW) SolveChallenge(challenge []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolveChallenge", challenge)
	ret0, _ := ret[0].(string)
	return ret0
}

// SolveChallenge indicates an expected call of SolveChallenge.
func (mr *MockPOWMockRecorder) SolveChallenge(challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolveChallenge", reflect.TypeOf((*MockPOW)(nil).SolveChallenge), challenge)
}

// VerifyResponse mocks base method.
func (m *MockPOW) VerifyResponse(challenge, responseNonce []byte, len int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResponse", challenge, responseNonce, len)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyResponse indicates an expected call of VerifyResponse.
func (mr *MockPOWMockRecorder) VerifyResponse(challenge, responseNonce, len interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResponse", reflect.TypeOf((*MockPOW)(nil).VerifyResponse), challenge, responseNonce, len)
}
